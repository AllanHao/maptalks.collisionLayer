/*!
 * maptalks.collisionLayer v0.2.0
 * LICENSE : MIT
 * (c) 2016-2018 maptalks.org
 */
/*!
 * requires maptalks@>=0.36.0 
 */
!function(t,o){"object"==typeof exports&&"undefined"!=typeof module?o(exports,require("maptalks"),require("rbush")):"function"==typeof define&&define.amd?define(["exports","maptalks","rbush"],o):o(t.maptalks=t.maptalks||{},t.maptalks,t.rbush)}(this,function(t,o,i){"use strict";function e(t,o){if("function"!=typeof o&&null!==o)throw new TypeError("Super expression must either be null or a function, not "+typeof o);t.prototype=Object.create(o&&o.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(t,o):function(t,o){for(var i=Object.getOwnPropertyNames(o),e=0;e<i.length;e++){var n=i[e],s=Object.getOwnPropertyDescriptor(o,n);s&&s.configurable&&void 0===t[n]&&Object.defineProperty(t,n,s)}}(t,o))}i=i&&i.hasOwnProperty("default")?i.default:i;var n=function(t){function n(){return function(t,o){if(!(t instanceof o))throw new TypeError("Cannot call a class as a function")}(this,n),function(t,o){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!o||"object"!=typeof o&&"function"!=typeof o?t:o}(this,t.apply(this,arguments))}return e(n,t),n.prototype.onAdd=function(){this.map.on("viewchange",this.onViewChange,this),this._rbush=i(),this._hidePoints=new o.MultiPoint([],{id:this.options.hidePointsId,symbol:this.options.hidePointsSymbol})},n.prototype.onViewChange=function(){var t=this;setTimeout(function(){return t.updateCollision()},0)},n.prototype.updateCollision=function(){var t=this;if(this.options.isCollision){this.getGeometryById(this.options.hidePointsId)||this.addGeometry(this._hidePoints),this._rbush.clear();var o=[],i=this.options,e=i.activeId,n=i.isShowCollisionPoints,s=this.getGeometryById(e),r=this.getMarkers();s&&(this._rbush.insert(this.getMarkerBox(s)),s.show()),r.forEach(function(i){if(s!==i){var e=t.getMarkerBox(i);0===t._rbush.search(e).length?(t._rbush.insert(e),i.show()):(i.hide(),o.push(i.getCoordinates()))}}),n?(this._hidePoints.setCoordinates(o),this._hidePoints.bringToBack()):this._hidePoints.setCoordinates([])}},n.prototype.getMarkerBox=function(t){var o=t.getSize(),i=o.width,e=o.height,n=this.map.coordinateToContainerPoint(t.getCoordinates()),s=n.x,r=n.y;return{minX:Math.round(s-i/2),maxX:Math.round(s+i/2),minY:Math.round(r-e/2),maxY:Math.round(r+e/2)}},n.prototype.getMarkers=function(){return this.getGeometries(function(t){return"Point"===t.type&&t})},n.prototype.isShowCollisionPoints=function(){return this.options.isShowCollisionPoints},n.prototype.showCollisionPoints=function(){this.options.isShowCollisionPoints=!0,this.updateCollision()},n.prototype.hideCollisionPoints=function(){this.options.isShowCollisionPoints=!1,this.updateCollision()},n.prototype.setActiveId=function(t){this.options.activeId=t,this.updateCollision()},n.prototype.enableCollision=function(){this.options.isCollision=!0,this.updateCollision()},n.prototype.disableCollision=function(){this.options.isCollision=!1,this._hidePoints.setCoordinates([]);this.getMarkers().forEach(function(t){t.show()})},n.prototype.isCollision=function(){return this.options.isCollision},n}(o.VectorLayer);n.mergeOptions({activeId:null,isCollision:!0,isShowCollisionPoints:!0,hidePointsId:"hidePoints",hidePointsSymbol:{markerType:"ellipse",markerFillOpacity:.3,markerLineOpacity:.3,markerWidth:3,markerHeight:3}}),t.CollisionLayer=n,Object.defineProperty(t,"__esModule",{value:!0}),"undefined"!=typeof console&&console.log("maptalks.collisionLayer v0.2.0, requires maptalks@>=0.36.0.")});